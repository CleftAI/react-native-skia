"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3361],{1184:(e,t,a)=>{a.d(t,{R:()=>o,x:()=>i});var n=a(4041);const s={},r=n.createContext(s);function o(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),n.createElement(r.Provider,{value:t},e.children)}},3188:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"animations/hooks","title":"Hooks","description":"Below are animations hooks we provide when using React Native Skia with Reanimated.","source":"@site/docs/animations/hooks.md","sourceDirName":"animations","slug":"/animations/hooks","permalink":"/react-native-skia/docs/animations/hooks","draft":false,"unlisted":false,"editUrl":"https://github.com/shopify/react-native-skia/edit/main/docs/docs/animations/hooks.md","tags":[],"version":"current","frontMatter":{"id":"hooks","title":"Hooks","sidebar_label":"Hooks","slug":"/animations/hooks"},"sidebar":"tutorialSidebar","previous":{"title":"Gestures","permalink":"/react-native-skia/docs/animations/gestures"},"next":{"title":"Textures","permalink":"/react-native-skia/docs/animations/textures"}}');var s=a(1085),r=a(1184);const o={id:"hooks",title:"Hooks",sidebar_label:"Hooks",slug:"/animations/hooks"},i=void 0,c={},l=[{value:"usePathInterpolation",id:"usepathinterpolation",level:2},{value:"usePathValue",id:"usepathvalue",level:2},{value:"useClock",id:"useclock",level:2},{value:"Canvas Size",id:"canvas-size",level:2},{value:"useRectBuffer",id:"userectbuffer",level:2},{value:"useRSXformBuffer",id:"usersxformbuffer",level:2}];function h(e){const t={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:["Below are animations hooks we provide when using React Native Skia with Reanimated.\nWe also provide hooks for ",(0,s.jsx)(t.a,{href:"/docs/animations/textures",children:"creating textures"})," when integrating with Reanimated."]}),"\n",(0,s.jsx)(t.h2,{id:"usepathinterpolation",children:"usePathInterpolation"}),"\n",(0,s.jsx)(t.p,{children:"This hook interpolates between different path values based on a progress value, providing smooth transitions between the provided paths."}),"\n",(0,s.jsxs)(t.p,{children:["Paths need to be interpolatable, meaning they must contain the same number and types of commands. If the paths have different commands or different numbers of commands, the interpolation may not behave as expected. Ensure that all paths in the ",(0,s.jsx)(t.code,{children:"outputRange"})," array are structured similarly for proper interpolation.\nTo interpolate two completely different paths, we found the ",(0,s.jsx)(t.a,{href:"https://github.com/veltman/flubber",children:"flubber library"})," to work well with Skia (",(0,s.jsx)(t.a,{href:"https://github.com/wcandillon/can-it-be-done-in-react-native/blob/master/season5/src/Headspace/Play.tsx#L16",children:"see example"}),")."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",metastring:"twoslash",children:'import React, { useEffect } from \'react\';\nimport { useSharedValue, withTiming } from \'react-native-reanimated\';\nimport { Skia, usePathInterpolation, Canvas, Path } from \'@shopify/react-native-skia\';\n\nconst angryPath = Skia.Path.MakeFromSVGString("M 16 25 C 32 27 43 28 49 28 C 54 28 62 28 73 26 C 66 54 60 70 55 74 C 51 77 40 75 27 55 C 25 50 21 40 27 55 Z")!;\nconst normalPath = Skia.Path.MakeFromSVGString("M 21 31 C 31 32 39 32 43 33 C 67 35 80 36 81 38 C 84 42 74 57 66 60 C 62 61 46 59 32 50 C 24 44 20 37 21 31 Z")!;\nconst goodPath = Skia.Path.MakeFromSVGString("M 21 45 C 21 37 24 29 29 25 C 34 20 38 18 45 18 C 58 18 69 30 69 45 C 69 60 58 72 45 72 C 32 72 21 60 21 45 Z")!;\n\nconst Demo = () => {\n  const progress = useSharedValue(0);\n  useEffect(() => {\n    progress.value = withTiming(1, { duration: 1000 });\n  }, []);\n\n  const path = usePathInterpolation(progress, [0, 0.5, 1], [angryPath, normalPath, goodPath]);\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Path path={path} style="stroke" strokeWidth={5} strokeCap="round" strokeJoin="round" />\n    </Canvas>\n  );\n};\n'})}),"\n",(0,s.jsx)(t.h2,{id:"usepathvalue",children:"usePathValue"}),"\n",(0,s.jsx)(t.p,{children:"This hooks offers an easy way to animate paths.\nBehind the scene, it make sure that everything is done as efficiently as possible.\nThere is an optional second parameter available to set the default path value."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",metastring:"twoslash",children:'import {useSharedValue, withSpring} from "react-native-reanimated";\nimport {Gesture, GestureDetector} from "react-native-gesture-handler";\nimport {usePathValue, Canvas, Path, processTransform3d, Skia} from "@shopify/react-native-skia";\n\nconst rrct = Skia.Path.Make();\nrrct.addRRect(Skia.RRectXY(Skia.XYWHRect(0, 0, 100, 100), 10, 10));\n\nexport const FrostedCard = () => {\n  const rotateY = useSharedValue(0);\n\n  const gesture = Gesture.Pan().onChange((event) => {\n    rotateY.value -= event.changeX / 300;\n  });\n\n  const clip = usePathValue((path) => {\n    "worklet";\n    path.transform(\n      processTransform3d([\n        { translate: [50, 50] },\n        { perspective: 300 },\n        { rotateY: rotateY.value },\n        { translate: [-50, -50] },\n      ])\n    );\n  }, rrct);\n  return (\n    <GestureDetector gesture={gesture}>\n      <Canvas style={{ flex: 1 }}>\n        <Path path={clip} />\n      </Canvas>\n    </GestureDetector>\n  );\n};\n'})}),"\n",(0,s.jsx)(t.h2,{id:"useclock",children:"useClock"}),"\n",(0,s.jsx)(t.p,{children:"This hook returns a number indicating the time in milliseconds since the hook was activated."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",metastring:"twoslash",children:'import { Canvas, useClock, vec, Circle } from "@shopify/react-native-skia";\nimport { useDerivedValue } from "react-native-reanimated";\n\nexport default function App() {\n  const t = useClock();\n\n  const transform = useDerivedValue(() => {\n    const scale = (2 / (3 - Math.cos(2 * t.value))) * 200;\n    return [\n      { translateX: scale * Math.cos(t.value) },\n      { translateY: scale * (Math.sin(2 * t.value) / 2) },\n    ];\n  });\n\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Circle c={vec(0, 0)} r={50} color="cyan" transform={transform} />\n    </Canvas>\n  );\n}\n'})}),"\n",(0,s.jsx)(t.h2,{id:"canvas-size",children:"Canvas Size"}),"\n",(0,s.jsxs)(t.p,{children:["The Canvas element has an ",(0,s.jsx)(t.code,{children:"onSize"})," property that can receive a shared value, which will be updated whenever the canvas size changes."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",metastring:"twoslash",children:'import {useSharedValue} from "react-native-reanimated";\nimport {Fill, Canvas} from "@shopify/react-native-skia";\n\nconst Demo = () => {\n  // size will be updated as the canvas size changes\n  const size = useSharedValue({ width: 0, height: 0 });\n  return (\n    <Canvas style={{ flex: 1 }} onSize={size}>\n      <Fill color="white" />\n    </Canvas>\n  );\n};\n'})}),"\n",(0,s.jsx)(t.h2,{id:"userectbuffer",children:"useRectBuffer"}),"\n",(0,s.jsxs)(t.p,{children:["Creates an array for rectangle to be animated.\nCan be used by any component that takes an array of rectangles as property, like the ",(0,s.jsx)(t.a,{href:"/docs/shapes/atlas",children:"Atlas API"}),"."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",metastring:"twoslash",children:'import {useRectBuffer} from "@shopify/react-native-skia";\n\nconst width = 256;\nconst size = 10;\nconst rects = 100;\n// Important to not forget the worklet directive\nconst rectBuffer = useRectBuffer(rects, (rect, i) => {\n  "worklet";\n  rect.setXYWH((i * size) % width, Math.floor(i / (width / size)) * size, size, size);\n}); \n'})}),"\n",(0,s.jsx)(t.h2,{id:"usersxformbuffer",children:"useRSXformBuffer"}),"\n",(0,s.jsxs)(t.p,{children:["Creates an array for ",(0,s.jsx)(t.a,{href:"/docs/shapes/atlas#rsxform",children:"rotate scale transforms"})," to be animated.\nCan be used by any component that takes an array of rotate scale transforms as property, like the ",(0,s.jsx)(t.a,{href:"/docs/shapes/atlas",children:"Atlas API"}),"."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",metastring:"twoslash",children:'import {useRSXformBuffer} from "@shopify/react-native-skia";\nimport {useSharedValue} from "react-native-reanimated";\n\nconst xforms = 100;\nconst pos = useSharedValue({ x: 0, y: 0 });\n// Important to not forget the worklet directive\nconst transforms = useRSXformBuffer(xforms, (val, _i) => {\n  "worklet";\n  const r = Math.atan2(pos.value.y, pos.value.x);\n  val.set(Math.cos(r), Math.sin(r), 0, 0);\n});\n'})})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}}}]);