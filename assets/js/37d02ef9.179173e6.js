"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1917],{1184:(n,e,t)=>{t.d(e,{R:()=>r,x:()=>s});var i=t(4041);const a={},o=i.createContext(a);function r(n){const e=i.useContext(o);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:r(n.components),i.createElement(o.Provider,{value:e},n.children)}},5952:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"skottie","title":"Skottie","description":"Skottie is a Lottie animation renderer built on Skia. It allows you to load and render After Effects animations exported via Bodymovin/Lottie in React Native Skia.","source":"@site/docs/skottie.md","sourceDirName":".","slug":"/skottie","permalink":"/react-native-skia/docs/skottie","draft":false,"unlisted":false,"editUrl":"https://github.com/shopify/react-native-skia/edit/main/docs/docs/skottie.md","tags":[],"version":"current","frontMatter":{"id":"skottie","title":"Skottie","sidebar_label":"Skottie","slug":"/skottie"},"sidebar":"tutorialSidebar","previous":{"title":"Video","permalink":"/react-native-skia/docs/video"},"next":{"title":"Paragraph","permalink":"/react-native-skia/docs/text/paragraph"}}');var a=t(1085),o=t(1184);const r={id:"skottie",title:"Skottie",sidebar_label:"Skottie",slug:"/skottie"},s=void 0,l={},c=[{value:"Rendering Animations",id:"rendering-animations",level:2},{value:"Using the Skottie Component",id:"using-the-skottie-component",level:3},{value:"Animated Playback with Reanimated",id:"animated-playback-with-reanimated",level:3},{value:"Basic Rendering",id:"basic-rendering",level:3},{value:"Creating a Skottie Animation",id:"creating-a-skottie-animation",level:2},{value:"With Assets",id:"with-assets",level:3},{value:"Applying Effects",id:"applying-effects",level:2},{value:"Animation Properties",id:"animation-properties",level:2},{value:"Basic Information",id:"basic-information",level:3},{value:"Dynamic Animation Properties",id:"dynamic-animation-properties",level:2},{value:"Slot Management",id:"slot-management",level:2},{value:"Getting Slot Information",id:"getting-slot-information",level:3},{value:"Setting Color Slots",id:"setting-color-slots",level:3},{value:"Property Access and Modification",id:"property-access-and-modification",level:2},{value:"Color Properties",id:"color-properties",level:3},{value:"Text Properties",id:"text-properties",level:3},{value:"Opacity Properties",id:"opacity-properties",level:3},{value:"Transform Properties",id:"transform-properties",level:3}];function m(n){const e={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,o.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.p,{children:"Skottie is a Lottie animation renderer built on Skia. It allows you to load and render After Effects animations exported via Bodymovin/Lottie in React Native Skia.\nIt provides a powerful way to integrate After Effects animations into your React Native Skia applications with full programmatic control over animation properties."}),"\n",(0,a.jsx)(e.h2,{id:"rendering-animations",children:"Rendering Animations"}),"\n",(0,a.jsx)(e.h3,{id:"using-the-skottie-component",children:"Using the Skottie Component"}),"\n",(0,a.jsxs)(e.p,{children:["React Native Skia provides a ",(0,a.jsx)(e.code,{children:"Skottie"})," component for easy integration:"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-tsx",metastring:"twoslash",children:'import React from "react";\nimport { Canvas, Group, Skottie, Skia } from "@shopify/react-native-skia";\n\nconst legoAnimationJSON = require("./assets/lego_loader.json");\nconst animation = Skia.Skottie.Make(JSON.stringify(legoAnimationJSON));\n\nconst SkottieExample = () => {\n  return (\n    <Canvas style={{ width: 400, height: 300 }}>\n      <Group transform={[{ scale: 0.5 }]}>\n        <Skottie animation={animation} frame={41} />\n      </Group>\n    </Canvas>\n  );\n};\n'})}),"\n",(0,a.jsx)(e.h3,{id:"animated-playback-with-reanimated",children:"Animated Playback with Reanimated"}),"\n",(0,a.jsx)(e.p,{children:"For smooth animation playback, combine Skottie with React Native Reanimated:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-tsx",metastring:"twoslash",children:'import React from "react";\nimport {\n  Skia,\n  Canvas,\n  useClock,\n  Group,\n  Skottie,\n} from "@shopify/react-native-skia";\nimport { useDerivedValue } from "react-native-reanimated";\n\nconst legoAnimationJSON = require("./assets/lego_loader.json");\nconst animation = Skia.Skottie.Make(JSON.stringify(legoAnimationJSON));\n\nconst AnimatedSkottieExample = () => {\n  const clock = useClock();\n  const frame = useDerivedValue(() => {\n    const fps = animation.fps();\n    const duration = animation.duration();\n    const currentFrame =\n      Math.floor((clock.value / 1000) * fps) % (duration * fps);\n    return currentFrame;\n  });\n\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Group transform={[{ scale: 0.5 }]}>\n        <Skottie animation={animation} frame={frame} />\n      </Group>\n    </Canvas>\n  );\n};\n'})}),"\n",(0,a.jsx)(e.h3,{id:"basic-rendering",children:"Basic Rendering"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-tsx",metastring:"twoslash",children:'import { Skia, Canvas } from "@shopify/react-native-skia";\nconst animation = {} as any;\n// ---cut---\nconst surface = Skia.Surface.MakeOffscreen(800, 600);\nif (!surface) {\n  throw new Error("Failed to create surface");\n}\nconst canvas = surface.getCanvas();\n\n// Seek to a specific frame\nanimation.seekFrame(41);\n\n// Render the animation\nanimation.render(canvas);\n\nsurface.flush();\nconst image = surface.makeImageSnapshot();\n'})}),"\n",(0,a.jsx)(e.h2,{id:"creating-a-skottie-animation",children:"Creating a Skottie Animation"}),"\n",(0,a.jsxs)(e.p,{children:["To create a Skottie animation, use ",(0,a.jsx)(e.code,{children:"Skia.Skottie.Make()"})," with your Lottie JSON data:"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-tsx",metastring:"twoslash",children:'import { Skia } from "@shopify/react-native-skia";\n\nconst legoAnimationJSON = require("./assets/lego_loader.json");\n\nconst animation = Skia.Skottie.Make(JSON.stringify(legoAnimationJSON));\n'})}),"\n",(0,a.jsx)(e.h3,{id:"with-assets",children:"With Assets"}),"\n",(0,a.jsx)(e.p,{children:"Many Lottie animations include external assets like fonts and images. You can provide these when creating the animation:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-tsx",metastring:"twoslash",children:'import { Skia } from "@shopify/react-native-skia";\n\nconst basicSlotsJSON = require("./assets/basic_slots.json");\n\nconst assets = {\n  NotoSerif: Skia.Data.fromBytes(new Uint8Array([])),\n  "img_0.png": Skia.Data.fromBytes(new Uint8Array([])),\n};\n\nconst animation = Skia.Skottie.Make(JSON.stringify(basicSlotsJSON), assets);\n'})}),"\n",(0,a.jsx)(e.h2,{id:"applying-effects",children:"Applying Effects"}),"\n",(0,a.jsxs)(e.p,{children:["The ",(0,a.jsx)(e.code,{children:"Skottie"})," component doesn't follow the same painting rules as other components.\nThis is because behind the scene, we use the Skottie module from Skia.\nHowever you can apply effets using the ",(0,a.jsx)(e.code,{children:"layer"})," property.\nThese are the rules as for the ",(0,a.jsx)(e.a,{href:"/docs/images-svg/#applying-effects",children:"ImageSVG"}),", the ",(0,a.jsx)(e.a,{href:"/docs/text/paragraph/#applying-effects",children:"Paragraph"}),", and the ",(0,a.jsx)(e.a,{href:"/docs/shapes/pictures/#applying-effects",children:"Picture"})," component.\nIn the example below, for instance we apply a blur filter to a Skottie animation."]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-tsx",metastring:"twoslash",children:'import React from "react";\nimport { Canvas, Skottie, Skia, Group, Paint, Blur } from "@shopify/react-native-skia";\n\nconst legoAnimationJSON = require("./assets/lego_loader.json");\nconst animation = Skia.Skottie.Make(JSON.stringify(legoAnimationJSON));\n\nexport const SVG = () => {\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <Group layer={<Paint><Blur blur={10} /></Paint>}>\n        <Skottie animation={animation} frame={41} />\n      </Group>\n    </Canvas>\n  );\n};\n'})}),"\n",(0,a.jsx)(e.h2,{id:"animation-properties",children:"Animation Properties"}),"\n",(0,a.jsx)(e.h3,{id:"basic-information",children:"Basic Information"}),"\n",(0,a.jsx)(e.p,{children:"Get basic information about your animation:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-tsx",metastring:"twoslash",children:'import { Skia } from "@shopify/react-native-skia";\nconst animation = {} as any;\n// ---cut---\n// Duration in seconds\nconst duration = animation.duration();\n\n// Frames per second\nconst fps = animation.fps();\n\n// Lottie version\nconst version = animation.version();\n\n// Animation dimensions\nconst size = animation.size(); // { width: 800, height: 600 }\n'})}),"\n",(0,a.jsx)(e.h2,{id:"dynamic-animation-properties",children:"Dynamic Animation Properties"}),"\n",(0,a.jsx)(e.p,{children:"Skottie allows you to customize Lottie animations at runtime by modifying their properties programmatically. This powerful feature enables you to change colors, text, opacity, and transforms without recreating the animation, making it perfect for creating dynamic, interactive experiences."}),"\n",(0,a.jsx)(e.p,{children:"Here's a complete example showing how to load and render a Skottie animation with Reanimated for smooth playback and dynamic properties:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-tsx",metastring:"twoslash",children:'import React from "react";\nimport { \n  Canvas, \n  Skia, \n  useClock,\n  Group,\n  Skottie\n} from "@shopify/react-native-skia";\nimport { useDerivedValue } from "react-native-reanimated";\n\nconst animationJSON = require("./assets/fingerprint.json");\n\n// Create animation and set properties outside the component\nconst animation = Skia.Skottie.Make(JSON.stringify(animationJSON));\nif (!animation) {\n  throw new Error("Failed to create animation");\n}\n\n// Get animation properties and modify them\nconst colorProps = animation.getColorProps();\nif (colorProps.length > 0) {\n  // Change the first color property\n  animation.setColor(colorProps[0].key, Skia.Color("rgb(60, 120, 255)"));\n}\n\n// Set color slots if available\nconst slotInfo = animation.getSlotInfo();\nif (slotInfo.colorSlotIDs.length > 0) {\n  animation.setColorSlot(slotInfo.colorSlotIDs[0], Skia.Color("magenta"));\n}\n\nconst SkottiePlayer = () => {\n  const clock = useClock();\n\n  const frame = useDerivedValue(() => {\n    const fps = animation.fps();\n    const duration = animation.duration();\n    const currentFrame =\n      Math.floor((clock.value / 1000) * fps) % (duration * fps);\n    return currentFrame;\n  });\n\n  return (\n    <Canvas style={{ width: 400, height: 400 }}>\n      <Group transform={[{ scale: 0.5 }]}>\n        <Skottie animation={animation} frame={frame} />\n      </Group>\n    </Canvas>\n  );\n};\n'})}),"\n",(0,a.jsx)(e.h2,{id:"slot-management",children:"Slot Management"}),"\n",(0,a.jsx)(e.p,{children:"Slots are placeholders built into the design of Lottie animations that allow for dynamic content replacement at runtime. This is incredibly convenient for customizing animations without recreating them - designers can create slots in After Effects, and developers can programmatically replace colors, text, images, and other properties."}),"\n",(0,a.jsx)(e.p,{children:"Skottie supports slots for dynamic content replacement:"}),"\n",(0,a.jsx)(e.h3,{id:"getting-slot-information",children:"Getting Slot Information"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-tsx",metastring:"twoslash",children:'const animation = {} as any;\n// ---cut---\nconst slotInfo = animation.getSlotInfo();\n// Returns:\n// {\n//   colorSlotIDs: ["FillsGroup", "StrokeGroup"],\n//   imageSlotIDs: ["ImageSource"], \n//   scalarSlotIDs: ["Opacity"],\n//   textSlotIDs: ["TextSource"],\n//   vec2SlotIDs: ["ScaleGroup"]\n// }\n'})}),"\n",(0,a.jsx)(e.h3,{id:"setting-color-slots",children:"Setting Color Slots"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-tsx",metastring:"twoslash",children:'import { Skia } from "@shopify/react-native-skia";\nconst animation = {} as any;\n// ---cut---\nanimation.setColorSlot("FillsGroup", Skia.Color("cyan"));\nanimation.setColorSlot("StrokeGroup", Skia.Color("magenta"));\n'})}),"\n",(0,a.jsx)(e.h2,{id:"property-access-and-modification",children:"Property Access and Modification"}),"\n",(0,a.jsx)(e.p,{children:"Beyond slots, Skottie provides powerful introspection capabilities that allow you to modify virtually any property of the animation at runtime. This gives you complete programmatic control over colors, text, opacity, transforms, and more - making it possible to create highly dynamic and interactive animations."}),"\n",(0,a.jsx)(e.h3,{id:"color-properties",children:"Color Properties"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-tsx",metastring:"twoslash",children:'import { Skia } from "@shopify/react-native-skia";\nconst animation = {} as any;\n// ---cut---\n// Get all color properties\nconst colorProps = animation.getColorProps();\n// Returns array of: { key: string, value: Float32Array }\n\n// Set a specific color property\nconst colorProp = colorProps[0];\nanimation.setColor(colorProp.key, Skia.Color("rgb(60, 120, 255)"));\n'})}),"\n",(0,a.jsx)(e.h3,{id:"text-properties",children:"Text Properties"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-tsx",metastring:"twoslash",children:'const animation = {} as any;\n// ---cut---\n// Get all text properties\nconst textProps = animation.getTextProps();\n// Returns array of: { key: string, value: { text: string, size: number } }\n\n// Set text content\nanimation.setText("hello!", "World", 164);\n'})}),"\n",(0,a.jsx)(e.h3,{id:"opacity-properties",children:"Opacity Properties"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-tsx",metastring:"twoslash",children:"const animation = {} as any;\n// ---cut---\n// Get all opacity properties\nconst opacityProps = animation.getOpacityProps();\n// Returns array of: { key: string, value: number }\n"})}),"\n",(0,a.jsx)(e.h3,{id:"transform-properties",children:"Transform Properties"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-tsx",metastring:"twoslash",children:"const animation = {} as any;\n// ---cut---\n// Get all transform properties\nconst transformProps = animation.getTransformProps();\n// Returns array of: { \n//   key: string, \n//   value: {\n//     anchor: { x: number, y: number },\n//     position: { x: number, y: number },\n//     scale: { x: number, y: number },\n//     rotation: number,\n//     skew: number,\n//     skewAxis: number\n//   }\n// }\n"})})]})}function p(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(m,{...n})}):m(n)}}}]);