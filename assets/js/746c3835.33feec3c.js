"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8646],{1184:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>a});var r=n(4041);const i={},o=r.createContext(i);function s(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(o.Provider,{value:t},e.children)}},1980:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>m,frontMatter:()=>s,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"canvas/contexts","title":"Contexts","description":"React Native Skia is using its own React renderer.","source":"@site/docs/canvas/contexts.md","sourceDirName":"canvas","slug":"/canvas/contexts","permalink":"/react-native-skia/docs/canvas/contexts","draft":false,"unlisted":false,"editUrl":"https://github.com/shopify/react-native-skia/edit/main/docs/docs/canvas/contexts.md","tags":[],"version":"current","frontMatter":{"id":"contexts","title":"Contexts","sidebar_label":"Contexts","slug":"/canvas/contexts"},"sidebar":"tutorialSidebar","previous":{"title":"Overview","permalink":"/react-native-skia/docs/canvas/overview"},"next":{"title":"Overview","permalink":"/react-native-skia/docs/paint/overview"}}');var i=n(1085),o=n(1184);const s={id:"contexts",title:"Contexts",sidebar_label:"Contexts",slug:"/canvas/contexts"},a=void 0,c={},d=[{value:"Using <code>its-fine</code>",id:"using-its-fine",level:2}];function l(e){const t={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.p,{children:["React Native Skia is using its own React renderer.\nIt is currently impossible to automatically share a React context between two renderers.\nThis means that a React Native context won't be available from your drawing directly.\nWe recommend preparing the data needed for your drawing outside the ",(0,i.jsx)(t.code,{children:"<Canvas>"})," element.\nHowever, if you need to use a React context within your drawing, you must re-inject it."]}),"\n",(0,i.jsxs)(t.p,{children:["We found ",(0,i.jsx)(t.a,{href:"https://github.com/pmndrs/its-fine",children:"its-fine"}),", also used by ",(0,i.jsx)(t.a,{href:"https://github.com/pmndrs/react-three-fiber",children:"react-three-fiber"}),", to provide an elegant solution to this problem."]}),"\n",(0,i.jsxs)(t.h2,{id:"using-its-fine",children:["Using ",(0,i.jsx)(t.code,{children:"its-fine"})]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",metastring:"twoslash",children:'import React from "react";\nimport { Canvas, Fill } from "@shopify/react-native-skia";\nimport {useTheme, ThemeProvider, ThemeContext} from "./docs/getting-started/Theme";\nimport { useContextBridge, FiberProvider } from "its-fine";\n\nconst MyDrawing = () => {\n  const { primary } = useTheme();\n  return <Fill color={primary} />;\n};\n\nexport const Layer = () => {\n  const ContextBridge = useContextBridge();\n  return (\n    <Canvas style={{ flex: 1 }}>\n      <ContextBridge>\n        <Fill color="black" />\n        <MyDrawing />\n      </ContextBridge>\n    </Canvas>\n  );\n};\n\nexport const App = () => {\n  return (\n    <FiberProvider>\n      <ThemeProvider primary="red">\n        <Layer />\n      </ThemeProvider>\n    </FiberProvider>\n  );\n};\n'})}),"\n",(0,i.jsx)(t.p,{children:"Below is the context definition that was used in this example:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",metastring:"twoslash",children:'import type { ReactNode } from "react";\nimport React, { useContext, createContext } from "react";\n\ninterface Theme {\n  primary: string;\n}\n\nexport const ThemeContext = createContext<Theme | null>(null);\n\nexport const ThemeProvider = ({\n  primary,\n  children,\n}: {\n  primary: string;\n  children: ReactNode;\n}) => (\n  <ThemeContext.Provider value={{ primary }}>\n    {children}\n  </ThemeContext.Provider>\n);\n\nexport const useTheme = () => {\n  const theme = useContext(ThemeContext);\n  if (theme === null) {\n    throw new Error("Theme provider not found");\n  }\n  return theme;\n};\n'})})]})}function m(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}}}]);